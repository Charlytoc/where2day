const chai = require('chai');
const Container = require('../container');

chai.config.truncateThreshold = 0;
const { expect } = chai;

/**
 * This test class can be considered as a playground,
 * so feel free to modify it as needed. E.g.:
 * - add your own custom tests
 * - delete existing tests
 * - modify test content or expected output
 *
 * The results of tests from this file will always be at the beginning
 * of the report generated by clicking the "Run" button.
 *
 * The results of these tests do not affect your final score
 * (unless the project fails to build).
 */
describe('Basic tests', () => {
  let container;

  beforeEach(() => {
    container = new Container();
  });

  /**
   * Add 1, 2, 5, 4 -> [1, 2, 4, 5]
   * Median of [1, 2, 4, 5] is 2
   * Delete 1 -> [2, 4, 5]
   * Median of [2, 4, 5] is 4
   */
  it('Test basic 1', function () {
    this.timeout(100);
    container.add(1);
    container.add(2);
    container.add(5);
    container.add(4);
    expect(container.getMedian()).to.be.equal(2);
    expect(container.delete(1)).to.be.true;
    expect(container.getMedian()).to.be.equal(4);
  });

  /**
   * Add 5, 3, 5 -> [3, 5, 5]
   * Median of [3, 5, 5] is 5
   * Delete 5, 5, 5 -> [3]
   * Median of [3] is 3
   * Delete [2, 3] -> []
   * Median of [] is null
   * Add 1, 1, 2, 2, 2 -> [1, 1, 2, 2, 2]
   * Median of [1, 1, 2, 2, 2] is 2
   * Delete 2 -> [1, 1, 2, 2]
   * Median of [1, 1, 2, 2] is 1
   * Delete 1 -> [1, 2, 2]
   * Median of [1, 2, 2] is 2
   */
  it('Test basic 2', function () {
    this.timeout(100);
    container.add(5);
    container.add(3);
    container.add(5);
    expect(container.getMedian()).to.be.equal(5);
    expect(container.delete(5)).to.be.true;
    expect(container.delete(5)).to.be.true;
    expect(container.delete(5)).to.be.false;
    expect(container.getMedian()).to.be.equal(3);
    expect(container.delete(2)).to.be.false;
    expect(container.delete(3)).to.be.true;
    expect(() => container.getMedian()).to.throw(Error);
    container.add(1);
    container.add(1);
    container.add(2);
    container.add(2);
    container.add(2);
    expect(container.getMedian()).to.be.equal(2);
    expect(container.delete(2)).to.be.true;
    expect(container.getMedian()).to.be.equal(1);
    expect(container.delete(1)).to.be.true;
    expect(container.getMedian()).to.be.equal(2);
  });

  /**
   * Delete 4 -> []
   * Median of [] is null
   * Add 10, 9, 8, ..., 1 -> [1, 2, 3, ..., 10]
   * Median of [1, 2, ..., 10] is 5
   * Delete 4, 5, 6 -> [1, 2, 3, 7, 8, 9, 10]
   * Median of [1, 2, 3, 7, 8, 9, 10] is 7
   */
  it('Test basic 3', function () {
    this.timeout(100);
    expect(container.delete(4)).to.be.false;
    expect(() => container.getMedian()).to.throw(Error);
    for (let i = 10; i >= 1; --i) {
      container.add(i);
    }
    expect(container.getMedian()).to.be.equal(5);
    for (let i = 4; i <= 6; ++i) {
      expect(container.delete(i)).to.be.true;
    }
    expect(container.getMedian()).to.be.equal(7);
  });
});
